[{"title":"article title","date":"2023-11-09T10:10:25.000Z","path":"2023/11/09/article-title/","content":"<h1 align = \"center\">四选一多路选择器</h1>\n\n<h3 id=\"一、实验目的与要求\"><a href=\"#一、实验目的与要求\" class=\"headerlink\" title=\"一、实验目的与要求\"></a>一、实验目的与要求</h3><ul>\n<li><p>设计一个二选一多路选择器，通过编写Verilog程序实现其功能，并使用仿真工具进行验证和分析。</p>\n</li>\n<li><p>熟悉 Quartus II 的 verilog 文本设计流程全过程，学习基本组合逻辑电路的设计、模块化设计、仿真和硬件验证</p>\n</li>\n</ul>\n<h3 id=\"二、实验设备\"><a href=\"#二、实验设备\" class=\"headerlink\" title=\"二、实验设备\"></a>二、实验设备</h3><p>SUN ESX86COP 实验仪一套、PC 机一台</p>\n<h3 id=\"三、实验内容\"><a href=\"#三、实验内容\" class=\"headerlink\" title=\"三、实验内容\"></a>三、实验内容</h3><blockquote>\n<p>编写一个四选一的多路选择器模块</p>\n</blockquote>\n<p>1、编写程序，然后对其编译、综合、仿真，并对仿真波形作出分析说明。（<strong>注意：项目名称和主模块模块名应保持一致。</strong>）</p>\n<p>2、引脚锁定以及硬件下载测试</p>\n<table>\n<thead>\n<tr>\n<th><strong>开关</strong></th>\n<th>FPGA管脚号</th>\n<th><strong>开关</strong></th>\n<th>FPGA管脚号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>K0</td>\n<td>135</td>\n<td>K8</td>\n<td>31</td>\n</tr>\n<tr>\n<td>K1</td>\n<td>136</td>\n<td>K9</td>\n<td>28</td>\n</tr>\n<tr>\n<td>K2</td>\n<td>143</td>\n<td>K10</td>\n<td>129</td>\n</tr>\n<tr>\n<td>K3</td>\n<td>2</td>\n<td>K11</td>\n<td>128</td>\n</tr>\n<tr>\n<td>K4</td>\n<td>1</td>\n<td>K12</td>\n<td>132</td>\n</tr>\n<tr>\n<td>K5</td>\n<td>7</td>\n<td>K13</td>\n<td>133</td>\n</tr>\n<tr>\n<td>K6</td>\n<td>3</td>\n<td>K14</td>\n<td>144</td>\n</tr>\n<tr>\n<td>K7</td>\n<td>11</td>\n<td>K15</td>\n<td>10</td>\n</tr>\n</tbody></table>\n<div STYLE=\"page-break-after: always;\"></div>\n\n<table>\n<thead>\n<tr>\n<th><strong>发光二极管</strong></th>\n<th><strong>FPGA</strong>管脚号</th>\n<th><strong>发光二极管</strong></th>\n<th>FPGA管脚号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LED0</td>\n<td>53</td>\n<td>LED8</td>\n<td>101</td>\n</tr>\n<tr>\n<td>LED1</td>\n<td>51</td>\n<td>LED9</td>\n<td>103</td>\n</tr>\n<tr>\n<td>LED2</td>\n<td>49</td>\n<td>LED10</td>\n<td>52</td>\n</tr>\n<tr>\n<td>LED3</td>\n<td>50</td>\n<td>LED11</td>\n<td>127</td>\n</tr>\n<tr>\n<td>LED4</td>\n<td>126</td>\n<td>LED12</td>\n<td>43</td>\n</tr>\n<tr>\n<td>LED5</td>\n<td>44</td>\n<td>LED13</td>\n<td>34</td>\n</tr>\n<tr>\n<td>LED6</td>\n<td>42</td>\n<td>LED14</td>\n<td>112</td>\n</tr>\n<tr>\n<td>LED7</td>\n<td>46</td>\n<td>LED15</td>\n<td>113</td>\n</tr>\n</tbody></table>\n<h3 id=\"四、实验实施\"><a href=\"#四、实验实施\" class=\"headerlink\" title=\"四、实验实施\"></a>四、实验实施</h3><blockquote>\n<p>根据实验内容进行实验，包括程序设计、编译、仿真、下载、测试等详细的实验过程，给出程序分析报告、仿真波形图等。包括实验过程中出现的问题、如何解决。</p>\n</blockquote>\n<h4 id=\"1-设计电路结构和功能\"><a href=\"#1-设计电路结构和功能\" class=\"headerlink\" title=\"1.设计电路结构和功能\"></a>1.设计电路结构和功能</h4><p>根据实验要求，设计一个四选一多路选择器。该选择器具有四个数据输入端（in0、in1、in2、in3），两个控制输入端（ Sel[1]、Sel[0] ），以及一个数据输出端（Out）。</p>\n<ul>\n<li>当 Sel[0] 和 Sel[1] 均为 0 时，选择器将 in0 的值传递到 Out；</li>\n<li>当 Sel[1] 为 0，Sel[0]为 1 时，选择器将 in1 的值传递到 Out；</li>\n<li>当 Sel[1] 为 1，Sel[0]为 0 时，选择器将 in2 的值传递到 Out；</li>\n<li>当 Sel[1] 和 Sel[0] 均为 1 时，选择器将 in3 的值传递到 Out；</li>\n</ul>\n<h4 id=\"2-编写Verilog程序\"><a href=\"#2-编写Verilog程序\" class=\"headerlink\" title=\"2.编写Verilog程序\"></a>2.编写Verilog程序</h4><p>打开任意文本编辑器，创建一个新的Verilog文件</p>\n<ul>\n<li>程序设计</li>\n</ul>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//====================================================================</span></span><br><span class=\"line\"><span class=\"comment\">//  Filename\t\t: mux4_1.v</span></span><br><span class=\"line\"><span class=\"comment\">//  Created On      : 2023-11-08</span></span><br><span class=\"line\"><span class=\"comment\">//  Version         : V1.0</span></span><br><span class=\"line\"><span class=\"comment\">//  Author          : Alpha</span></span><br><span class=\"line\"><span class=\"comment\">//  Description     : A four-to-one multiplexer</span></span><br><span class=\"line\"><span class=\"comment\">//  Modification    : none</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//====================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> mux4_1 (out, in0, in1, in2, in3, sel);</span><br><span class=\"line\">\t<span class=\"keyword\">output</span> out;</span><br><span class=\"line\">\t<span class=\"keyword\">input</span> in0, in1, in2, in3;</span><br><span class=\"line\">\t<span class=\"keyword\">input</span>[<span class=\"number\">1</span>:<span class=\"number\">0</span>] sel;</span><br><span class=\"line\">\t<span class=\"keyword\">reg</span> out;</span><br><span class=\"line\">\t<span class=\"keyword\">always</span> @(in0 <span class=\"keyword\">or</span> in1 <span class=\"keyword\">or</span> in2 <span class=\"keyword\">or</span> in3 <span class=\"keyword\">or</span> sel) <span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> (sel)</span><br><span class=\"line\">\t\t\t<span class=\"number\">2&#x27;b00</span>: out &lt;= in0; </span><br><span class=\"line\">\t\t\t<span class=\"number\">2&#x27;b01</span>: out &lt;= in1; </span><br><span class=\"line\">\t\t\t<span class=\"number\">2&#x27;b10</span>: out &lt;= in2; </span><br><span class=\"line\">\t\t\t<span class=\"number\">2&#x27;b11</span>: out &lt;= in3; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>: out &lt;= in0; </span><br><span class=\"line\">\t\t<span class=\"keyword\">endcase</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-使用-Quartus-软件进行仿真\"><a href=\"#3-使用-Quartus-软件进行仿真\" class=\"headerlink\" title=\"3.使用 Quartus 软件进行仿真\"></a>3.使用 <code>Quartus</code> 软件进行仿真</h4><ul>\n<li>新建项目工程</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/1.png\"/>\n\n<ul>\n<li>编译过程</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/2.png\"/>\n\n<ul>\n<li>仿真验证</li>\n</ul>\n<blockquote>\n<p>仿真参数设置：仿真时长设置为 500 ns</p>\n</blockquote>\n<p>输入波形参数设置如下：</p>\n<table><tr>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/in1.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">in0</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/in0.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">in1</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/in2.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">in2</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/in3.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">in3</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/sel.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">sel</div> </center></td>\n</tr></table>\n\n\n<p>设置结果如下：</p>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/3.png\"/>\n\n<ul>\n<li>功能仿真</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/4.png\"/>\n\n<ul>\n<li>分析仿真结果</li>\n</ul>\n<blockquote>\n<p>由仿真结果图可以看到：</p>\n<p>sel 信号为 00 时，out 输出与 in0 输入一致；</p>\n<p>sel 信号为 01 时，out 输出与 in1 输入一致；</p>\n<p>sel 信号为 10 时，out 输出与 in2 输入一致；</p>\n<p>sel 信号为 11 时，out 输出与 in3 输入一致；</p>\n</blockquote>\n<ul>\n<li>时序仿真（考虑硬件延时）</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/5.png\"/>\n\n<ul>\n<li>RTL电路</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/6.png\"/>\n\n<h4 id=\"4-FPGA实际验证\"><a href=\"#4-FPGA实际验证\" class=\"headerlink\" title=\"4.FPGA实际验证\"></a>4.FPGA实际验证</h4><ul>\n<li>进行 FPGA 管脚定位，配置芯片管脚</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/lab2-8.png\"/>\n\n<p>管脚定位表为：</p>\n<table>\n<thead>\n<tr>\n<th>信号量</th>\n<th>FPGA管脚号</th>\n<th>实验箱硬件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>in0</td>\n<td>PIN_10</td>\n<td>开关 K15</td>\n</tr>\n<tr>\n<td>in1</td>\n<td>PIN_144</td>\n<td>开关 K14</td>\n</tr>\n<tr>\n<td>in2</td>\n<td>PIN_133</td>\n<td>开关 K13</td>\n</tr>\n<tr>\n<td>in3</td>\n<td>PIN_132</td>\n<td>开关 K12</td>\n</tr>\n<tr>\n<td>sel[1]</td>\n<td>PIN_136</td>\n<td>开关 K1</td>\n</tr>\n<tr>\n<td>sel[0]</td>\n<td>PIN_135</td>\n<td>开关 K0</td>\n</tr>\n<tr>\n<td>out</td>\n<td>PIN_46</td>\n<td>发光二极管 LED7</td>\n</tr>\n</tbody></table>\n<ul>\n<li>再次编译</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/7.png\"/>\n\n<ul>\n<li>进行烧录</li>\n</ul>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/9.png\"/>\n\n<ul>\n<li>下载到FPGA实际验证</li>\n</ul>\n<blockquote>\n<p>预期实验结果为：sel 控制选择信号，选择四个输入信号中的一个，输出信号 out 与被选择的输入信号输出一致</p>\n</blockquote>\n<p>首先将实验代码烧录到实验箱中的FPGA上去，烧录完成之后，如图 0 所示；</p>\n<p>K1 K0 均为低电平时，即 <code>00</code> ；LED7 显示与 K15 输出一致，拨动K15，将其置为高电平，LED7亮；如图 1 所示；</p>\n<p>K1 为低电平，K0 为高电平时，即 <code>01</code> ；LED7 显示与 K14 输出一致，拨动K14，将其置为高电平，LED7亮；如图 2 所示；</p>\n<p>K1 为高电平，K0 为低电平时，即 <code>10</code> ；LED7 显示与 K13 输出一致，拨动K13，将其置为高电平，LED7亮；如图 3 所示；</p>\n<p>K1 K0 均为高电平时，即 <code>11</code> ；LED7 显示与 K12 输出一致，拨动K12，将其置为高电平，LED7亮；如图 4 所示；</p>\n<table><tr>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/r51.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">图 0</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/r50.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">图 1</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/r52.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">图 2</div> </center></td>\n</tr></table>\n\n\n<table><tr>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/r53.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">图 3</div> </center></td>\n    <td><center>    <img style=\"border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\"     src=\"https://gitee.com/potato13/picture/raw/master/pictures/r54.png\">    <br>    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;\">图 4</div> </center></td>\n</tr></table>\n\n\n<h4 id=\"5-实验结果和分析\"><a href=\"#5-实验结果和分析\" class=\"headerlink\" title=\"5.实验结果和分析\"></a>5.实验结果和分析</h4><p>根据实验步骤，完成了四选一多路选择器的设计、编译、仿真、下载和测试。通过仿真波形图和实际测试，通过观察和分析输出信号的变化情况，确保选择器按照设计要求正确工作。</p>\n<p>在仿真中，我们设置了多个测试用例，分别对选择器的不同输入和控制信号进行了测试。通过观察仿真波形图和实际测试结果，我们可以验证选择器的功能是否正确，确保选择器按照预期工作。</p>\n<h4 id=\"6-实验中可能遇到的问题及解决方法\"><a href=\"#6-实验中可能遇到的问题及解决方法\" class=\"headerlink\" title=\"6.实验中可能遇到的问题及解决方法\"></a>6.实验中可能遇到的问题及解决方法</h4><p>1.语法错误：在编写Verilog代码时，可能会出现语法错误导致编译失败。这时需要仔细检查代码，确保语法正确。</p>\n<p>2.模块连接错误：在仿真过程中，如果模块之间的连接有误，可能会导致输出结果不符合预期。此时需要检查模块的端口连接是否正确。</p>\n<p>3.仿真波形不符合预期：如果仿真波形不符合预期，可以检查以下可能的原因：</p>\n<ul>\n<li>输入数据设置错误：检查输入数据的设置是否符合实验要求，确保在正确的时间点进行设置。</li>\n<li>时序问题：如果选择器的输入和输出信号在不同的时钟域中，可能存在时序问题。可以添加适当的时序约束或插入适当的同步元件来解决时序问题。</li>\n<li>逻辑错误：检查Verilog代码中的逻辑是否正确，特别是在选择器的输出部分。</li>\n</ul>\n<blockquote>\n<p>本次实验过程中遇到问题，编写代码时将输入引脚in2错写为in1，导致仿真输出波形出现问题，检查出错误改正后后仿真验证正确</p>\n</blockquote>\n<p>4.下载失败：在将比特流文件下载到目标设备时，可能会出现下载失败的情况。这时需要检查设备连接是否正确，以及比特流文件是否与目标设备兼容。可以尝试重新下载或更换目标设备进行测试。</p>\n<blockquote>\n<p>此次实验出现驱动下载不成功的情况，最终通过查阅资料进行解决</p>\n</blockquote>\n<h3 id=\"五、实验结果说明\"><a href=\"#五、实验结果说明\" class=\"headerlink\" title=\"五、实验结果说明\"></a>五、实验结果说明</h3><p>FPGA 验证结果与仿真结果一致</p>\n<img src=\"https://gitee.com/potato13/picture/raw/master/pictures/fc9ee60300bb4e23b750cf87a6199a36.gif\"/>\n","excerpt":"","categories":[],"tags":[]},{"title":"web开发","date":"2021-03-23T13:59:26.000Z","path":"2021/03/23/web开发/","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>HTML是用来描述网页的一种语言，是使用标签来描述网页的</p>\n<p><strong>HTML</strong> 超文本标记语言（Hyper Text Markup Language）</p>\n<p>HTML是使用标签来描述网页的</p>\n","excerpt":"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"}]},{"title":"名词","date":"2021-03-23T01:06:20.000Z","path":"2021/03/23/名词/","content":"<p><strong>IoT</strong>    <strong>物联网</strong>（英语：Internet of Things，简称<strong>IoT</strong>）</p>\n<p><strong>SoC</strong>    <strong>单片系统</strong>或<strong>片上系统</strong>（英语：<strong>System on a Chip</strong>，缩写：<strong>SoC</strong>）</p>\n<p><strong>CPU</strong>    <strong>中央处理器</strong> （英语：<strong>C</strong>entral <strong>P</strong>rocessing <strong>U</strong>nit，缩写：<strong>CPU</strong>）</p>\n<p><strong>SDK</strong>    <strong>软件开发工具包</strong>（Software Development Kit, SDK）</p>\n<p><strong>API</strong>    <strong>应用程序接口</strong>（英语：<strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface），缩写为<strong>API</strong></p>\n<p><strong>RISC</strong>    <strong>精简指令集计算机</strong>（英语：<strong>reduced instruction set computer</strong>，缩写：<strong>RISC</strong>）或简译为<strong>精简指令集</strong>，是<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F\">计算机</a><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8\">中央处理器</a>的一种设计模式。</p>\n<blockquote>\n<p><strong>精简指令集计算机</strong>（英语：<strong>reduced instruction set computer</strong>，<a href=\"https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99\">缩写</a>：<strong>RISC</strong>）或简译为<strong>精简指令集</strong>，是<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F\">计算机</a><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8\">中央处理器</a>的一种设计模式。这种设计思路可以想像成是一家模块化的组装工厂，对指令数目和寻址方式都做了精简，使其实现更容易，指令并行执行程度更好，编译器的效率更高。目前常见的精简指令集<a href=\"https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%99%95%E7%90%86%E5%99%A8\">微处理器</a>包括<a href=\"https://zh.wikipedia.org/wiki/DEC_Alpha\">DEC Alpha</a>、<a href=\"https://zh.wikipedia.org/w/index.php?title=ARC_(%E8%99%95%E7%90%86%E5%99%A8)&action=edit&redlink=1\">ARC</a>、<a href=\"https://zh.wikipedia.org/wiki/ARM%E6%9E%B6%E6%A7%8B\">ARM</a>、<a href=\"https://zh.wikipedia.org/wiki/AVR\">AVR</a>、<a href=\"https://zh.wikipedia.org/wiki/MIPS%E6%9E%B6%E6%A7%8B\">MIPS</a>、<a href=\"https://zh.wikipedia.org/wiki/PA-RISC\">PA-RISC</a>、<a href=\"https://zh.wikipedia.org/wiki/Power_Architecture\">Power ISA</a>（包括<a href=\"https://zh.wikipedia.org/wiki/PowerPC\">PowerPC</a>、<a href=\"https://zh.wikipedia.org/wiki/Cell\">PowerXCell</a>）、<a href=\"https://zh.wikipedia.org/wiki/RISC-V\">RISC-V</a>和<a href=\"https://zh.wikipedia.org/wiki/SPARC\">SPARC</a>等。</p>\n</blockquote>\n","excerpt":"","categories":[],"tags":[]},{"title":"学习路线","date":"2021-03-18T12:09:39.000Z","path":"2021/03/18/学习路线/","content":"<h3 id=\"目前安排\"><a href=\"#目前安排\" class=\"headerlink\" title=\"目前安排\"></a>目前安排</h3><ul>\n<li><p>C语言的学习</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  P31</p>\n</li>\n<li><p>MSP430的学习</p>\n</li>\n<li><p>Python的学习</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\">  P13</p>\n</li>\n</ul>\n","excerpt":"","categories":[],"tags":[{"name":"leader","slug":"leader","permalink":"http://example.com/tags/leader/"}]},{"title":"FPGA技术要点","date":"2021-03-18T05:38:57.000Z","path":"2021/03/18/FPGA技术要点/","content":"<h4 id=\"正点原子教程\"><a href=\"#正点原子教程\" class=\"headerlink\" title=\"正点原子教程\"></a>正点原子教程</h4><ul>\n<li>环境搭建</li>\n<li>软件使用</li>\n</ul>\n","excerpt":"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"http://example.com/tags/FPGA/"}]},{"title":"C语言学习笔记","date":"2021-03-17T15:42:50.000Z","path":"2021/03/17/C语言学习笔记/","content":"<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><blockquote>\n<p>避免重复造轮子</p>\n<p>不会就查阅FishC网站！</p>\n</blockquote>\n<h4 id=\"01-取值范围\"><a href=\"#01-取值范围\" class=\"headerlink\" title=\"01-取值范围\"></a>01-取值范围</h4><ul>\n<li>CPU能够读懂的最小单位——比特位  </li>\n<li>内存机构的最小寻址单位——字节，Byte ，B  </li>\n<li>1Byte == 8bit</li>\n</ul>\n<h4 id=\"02-短路求值\"><a href=\"#02-短路求值\" class=\"headerlink\" title=\"02-短路求值\"></a>02-短路求值</h4><ul>\n<li>&amp;&amp;    左边为0，右边表达式便不再执行</li>\n<li>||      左边为1，右边表达式便不再执行</li>\n</ul>\n<blockquote>\n<p>goto 语句——直接跳出循环</p>\n</blockquote>\n<h4 id=\"17-数组\"><a href=\"#17-数组\" class=\"headerlink\" title=\"17-数组\"></a>17-数组</h4><ul>\n<li>整形int在内存中占4个字节</li>\n<li>字符型char在内存中占1个字节；浮点型float在内存中占4个字节</li>\n<li>双精度double在内存中占8个字节</li>\n<li>int a[x]，<strong>数组可以动态定义</strong></li>\n<li>数组中元素下标从0开始</li>\n<li><strong>注意数组的越界</strong></li>\n<li>sizeof 用来求占用的内存大小</li>\n</ul>\n<h4 id=\"21-指针\"><a href=\"#21-指针\" class=\"headerlink\" title=\"21-指针\"></a><strong>21-指针</strong></h4><ul>\n<li>变量名告诉编译器，编译器按照变量名找到对应的地址</li>\n<li><strong>地址——指针；存放地址（指针）的变量——指针变量</strong></li>\n<li><strong>避免访问未初始化的指针</strong></li>\n<li>定义时写为*pa只是为了与正常变量进行区分，指针变量为pa</li>\n</ul>\n<h4 id=\"22-指针和数组\"><a href=\"#22-指针和数组\" class=\"headerlink\" title=\"22-指针和数组\"></a>22-指针和数组</h4><blockquote>\n<p><strong>要学会看运算符的优先级！</strong></p>\n</blockquote>\n<ul>\n<li><p>数组名其实是数组第一个元素的地址</p>\n</li>\n<li><p>数组名只是一个地址；而指针是一个左值</p>\n</li>\n<li><p><strong>指针数组——数组</strong>；指针数组是一个数组，每个数组元素存放一个指针变量</p>\n</li>\n<li><p><strong>数组指针——指针</strong>；数组指针是一个指针，它指向的是一个数组</p>\n</li>\n<li><p><em><strong>array 表示数组第一个元素的位置，而 &amp;array 表示的是整个数组的位置（这里将数组看做一个整体）</strong></em></p>\n<blockquote>\n<p><strong>重点强调：array 是数组第一个元素的地址，所以 array + 1 指向数组第二个元素；&amp;array 是整个数组的地址，所以 &amp;array + 1 指向整个数组最后的位置。</strong></p>\n</blockquote>\n</li>\n<li><p><em>悬空指针就是指向了不确定的内存区域的指针，通常对这种指针进行操作会使程序发生不可预知的错误。</em></p>\n</li>\n<li><p><em>字符串就是指向字符的指针</em></p>\n</li>\n<li><p>数组可以用下标法来访问数组中的元素，又可以用指针的形式来访问</p>\n</li>\n</ul>\n<h4 id=\"27-常量和指针\"><a href=\"#27-常量和指针\" class=\"headerlink\" title=\"27-常量和指针\"></a>27-常量和指针</h4><h4 id=\"28-函数\"><a href=\"#28-函数\" class=\"headerlink\" title=\"28-函数\"></a>28-函数</h4><blockquote>\n<p><strong>模块化程序设计</strong></p>\n</blockquote>\n","excerpt":"","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"Hello World","date":"2021-03-17T14:08:07.162Z","path":"2021/03/17/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>第一次博客搭建，记录一下！</p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n","excerpt":"","categories":[],"tags":[{"name":"Hello World","slug":"Hello-World","permalink":"http://example.com/tags/Hello-World/"}]}]